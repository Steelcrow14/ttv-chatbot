// schema.prisma

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["windows", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("NEXT_POSTGRES_DB_URL")
}

//Required by NextAuth.js
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String           @id @default(cuid())
    name            String?
    email           String?          @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    chatBotCommands ChatBotCommand[]
    userFiles       UserFile[]
    settings        Settings?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//Everything else
enum CommandType {
    audio
    say
}

enum AudioSource {
    file
    url
}

//Type 'video' is basically a joke and is not used.
enum FileType {
    audio
    video
}

model UserFile {
    id     String   @id @default(cuid())
    name   String
    file   String
    type   FileType
    user   User?    @relation(fields: [userId], references: [id])
    userId String?
}

model ChatBotCommand {
    id               String       @id @default(cuid())
    name             String       @unique @db.VarChar(255)
    type             CommandType
    audiosrc         AudioSource?
    content          String?
    file             String?
    isInterval       Boolean?     @default(false)
    intervalMs       Int?         @default(0)
    ignoreAudioQueue Boolean      @default(false)
    active           Boolean      @default(true)
    user             User?        @relation(fields: [userId], references: [id])
    userId           String?
}

model Settings {
    id      String @id @default(cuid())
    channel String @db.VarChar(255)
    user    User   @relation(fields: [userId], references: [id])
    userId  String @unique
}
